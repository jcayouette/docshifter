<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="at.images">
 <title>Image Building and Management</title>

 <sect1 xml:id="at.image.overview">
  <title>Image Building Overview</title>
  <para> &susemgr; enables system administrators to build containers, create Image Stores, and
   manage Image Profiles. The following sections target administrators familiar with containers,
   registry services, and assocaited terminology.</para>
  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="image-building.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="image-building.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

 </sect1>
 <sect1 xml:id="at.image.requirements">
  <title>Requirements</title>

  <para>The containers feature is available for Salt minions running &sls; 12 or later. The
   following requirements should be met before following this guide:</para>

  <itemizedlist>
   <listitem>
    <para>You will need an existing external Github or internal Gitlab Repository containing a
     Dockerfile and configuration scripts (Example scripts are provided in the following
     sections)</para>
   </listitem>
   <listitem>
    <para>Portus or another image registry properly configured.</para>
    <note>
     <title>Registry Provider Solutions</title>
     <para>If you require a private image registry you can use an open source solution such as
       <literal>Portus</literal>. For additional information on setting up Portus as a registry
      provider, see the:</para>
     <itemizedlist>

      <listitem>
       <para><link xlink:href="http://port.us.org/">Portus Documentation</link></para>
      </listitem>
     </itemizedlist>
    </note>
   </listitem>
  </itemizedlist>
  <para>For more information on Containers or CaaS Platform review the following links:</para>
  <itemizedlist>
   <listitem>
    <para>
     <link
      xlink:href="https://www.suse.com/documentation/sles-12/book_sles_docker/data/book_sles_docker.html"
      >SUSE Linux Enterprise Server 12 SP3 Docker Guide</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://www.suse.com/documentation/suse-caasp-2/">SUSE CaaS Platform 2
      Documentation</link>
    </para>
   </listitem>
  </itemizedlist>

 </sect1>
 <sect1 xml:id="at.images.buildhost">
  <title>Creating a Build Host</title>

  <para> To build container images with &susemgr;, you will need to create and configure a build
   host. Build hosts are Salt minions running SLES 12 or later. The following steps will guide you
   though the initial configuration for a build host.</para>


  <para> From the &susemgr; &webui; perform the following steps to configure a build host. </para>

  <procedure>
   <step>
    <para> Select a minion that will be designated as a build host from the <menuchoice>
      <guimenu>Systems</guimenu>
      <guimenu>Overview</guimenu>
     </menuchoice> page. </para>
   </step>
   <step>
    <para> From the <guimenu>System Details</guimenu> page for the selected minion assign the
     containers modules by going to <menuchoice>
      <guimenu>Software</guimenu>
      <guimenu>Software Channels</guimenu>
     </menuchoice> and enable <literal>SLE-Module-Containers12-Pool</literal> and
      <literal>SLE-Module-Containers12-Updates</literal>. Confirm by clicking <guimenu>Change
      Subscriptions</guimenu>. </para>
   </step>
   <!--<step>
    <para>
     <remark>Is this actually still needed? Or was this just an issue during beta
      development?</remark> Update <package>salt</package> and <package>salt-minion</package>
     packages. </para>
    <warning>
     <title>Upating Salt</title>
     <para> Do not update <package>salt</package> itself using Salt states. First update all other
      system packages using Salt states and then update <package>salt</package> as a stand-alone
      step from the &susemgr; &webui;. </para>
    </warning>
   </step> -->
   <step>
    <para> From the <menuchoice>
      <guimenu>System Details</guimenu>
      <guimenu>Properties</guimenu>
     </menuchoice> page, enable the <guimenu>Add-on System Type</guimenu>
     <literal>Container Build Host</literal> and confirm by selecting <guimenu>Update
      Properties</guimenu>. </para>
   </step>
   <step>
    <para>Install all required packaged by applying the Highstate. From the system's details page
     select <menuchoice>
      <guimenu>States</guimenu>
      <guimenu>Highstate</guimenu>
     </menuchoice> and select <guimenu>Apply Highstate</guimenu>. Alternatively apply a Highstate
     from the command line by executing <literal>state.highstate</literal> from the SUSE Manager
     Server command line. </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="at.images.buildchannels">
  <title>Define Container Build Channels with an Activation Key</title>

  <para> Create an activation key associated with the channel that your images will use. </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="systems_create_activation_key.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="systems_create_activation_key.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <step>
    <para> From the left navigation menu select <menuchoice>
      <guimenu>Systems</guimenu>
      <guimenu>Activation Keys</guimenu>
     </menuchoice>. </para>
   </step>
   <step>
    <para> Click <guimenu>Create Key</guimenu>. </para>
   </step>
   <step>
    <para> Enter a <guimenu>Description</guimenu>, a <guimenu>Key</guimenu> name, Use the drop-down
     box to select the <guimenu>Base Channel</guimenu> that should be associated with this key.
     Confirm with <guimenu>Create Activation Key</guimenu>. </para>
   </step>
  </procedure>
  <para> For more information, see <xref linkend="bp.key.managment"/>. </para>
 </sect1>
 <sect1>
  <title>Creating an Image Store</title>

  <para>Define a location to store all of your images by creating an Image Store. </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_stores.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_stores.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <step>
    <para> From the left navigation menu select <menuchoice>
      <guimenu>Images</guimenu>
      <guimenu>Stores</guimenu>
     </menuchoice>. </para>
   </step>
   <step>
    <para> Click <guimenu>Create</guimenu> to create a new store. </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="images_image_stores_create.png" width="400"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="images_image_stores_create.png" width="80%"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>&susemgr; currently provides support only for the <literal>Registry</literal>
     <guimenu>Store Type</guimenu>. Define a name for the image store in the
      <guimenu>Label</guimenu> field. </para>
   </step>
   <step>
    <para>Provide the path to your image registry by filling in the <guimenu>URI</guimenu> field.
     The FQDN of the container registry host (whether internal or external) is sufficient. </para>
    <screen>registry.example.com</screen>
   </step>
   <step>
    <para> Click <guimenu>Create</guimenu> to add the new <literal>Image Store</literal>. </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="at.images.profile">
  <title>Creating an Image Profile</title>

  <para>Manage Image Profiles from the Image Profile page. </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_profiles.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_profiles.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <title>Create an Image Profile</title>
   <step>
    <para> To create an image profile select <menuchoice>
      <guimenu>Image</guimenu>
      <guimenu>Profiles</guimenu>
     </menuchoice> and click <guimenu>Create</guimenu>. </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="images_image_create_profile.png" width="400"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="images_image_create_profile.png" width="80%"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>Provide a name for the <literal>Image Profile</literal> by filling in the
      <guimenu>Label</guimenu> field.</para>
   </step>
   <step>
    <para>Use a <literal>Dockerfile</literal> as the default <literal>Image Type</literal></para>
   </step>
   <step>
    <para>Use the dropdown to select your registry from the <literal>Target Image Store</literal>
     field. </para>
   </step>
   <step>
    <para>Enter a Github or Gitlab repositiory URL (http/https/token authentication) in the
      <guimenu>Path</guimenu> field using one of the following formats: </para>
    <itemizedlist>
     <title>Github Path Options</title>
     <listitem>
      <para>Github Single User Project Repository:</para>
      <screen>https://github.com/USER/project.git#branchname:folder</screen>
     </listitem>
     <listitem>
      <para>Github Organization Project Repository:</para>
      <screen>https://github.com/ORG/project.git#branchname:folder</screen>
     </listitem>
     <listitem>
      <para>Github Token Authentication</para>
      <para>If your GIT repository is private and not publicly accessible, you need to modify the
       profile's GIT URL to include some authentication. Use the following URL format to
       authenticate with a Github token.</para>
      <screen>https://USER:&lt;AUTHENTICATION_TOKEN&gt;@github.com/USER/project.git#master:/container/</screen>
     </listitem>
    </itemizedlist>

    <itemizedlist>
     <title>Gitlab Path Options</title>
     <listitem>
      <para>Gitlab Single User Project Repository</para>
      <screen>https://gitlab.example.com/USER/project.git#master:/container/</screen>
     </listitem>
     <listitem>
      <para>Gitlab Groups Project Repository</para>
      <screen>https://gitlab.example.com/GROUP/project.git#master:/container/</screen>
     </listitem>
     <listitem>
      <para>Gitlab Token Authentication</para>
      <para>If your GIT repository is private and not publicly accessible, you need to modify the
       profile's GIT URL to include some authentication. Use the following URL format to
       authenticate with a Gitlab token.</para>
      <screen>https://gitlab-ci-token:&lt;AUTHENTICATION_TOKEN&gt;@gitlab.example.com/USER/project.git#master:/container/</screen>
     </listitem>
    </itemizedlist>

    <important>
     <title>Specifying a Github or Gitlab Branch</title>
     <para>If a branchname is not specified the <literal>master</literal> branch will be used by
      default. If a <literal>folder</literal> is not specified a <literal>Dockerfile</literal> is
      expected to be in the root directory of the Github or Gitlab checkout. </para>
    </important>
   </step>
   <step>
    <para>Select an <literal>Activation Key</literal> (Activation Keys ensure images using a profile
     are assigned to the correct channel and packages).</para>
    <note>
     <title>Relationship Between Activation Keys and Image Profiles</title>
     <para>When you associate an activation key with an image profile you are ensuring any image
      using the profile will use the correct software channel and any packages in the
      channel.</para>
    </note>
   </step>
   <step>
    <para> Click the <guimenu>Create</guimenu> button. </para>
   </step>
  </procedure>

  <sect2>
   <title>Example Dockerfile and add_packages Script</title>
   <para>The following is an example Dockerfile. You specify a Dockerfile that will be used during
    iamge building when creating an image profile. A Dockerfiel and any assocaited scripts should be
    stored within an internal or external Github/Gitlab repository: </para>
   <important>
    <title>Required Dockerfile Lines</title>
    <para>The following basic Dockerfile lines provide access to a specific repository version
     served by SUSE manager. The following example Dockerfile is used by SUSE Manager to trigger a
     build job on a build host minion. These ARGS ensure that the image built is associated with the
     desired repo version served by SUSE Manager. These <literal>ARG</literal>s also allow you to
     build image versions of SLES which may differ from the version of SLES used by the build host
     itself. </para>
    <para>For example: The <literal>ARG repo</literal> and echo to the repository file creates and
     then injects the correct path into the repo file for the desired channel version .
      <emphasis>The repository version is determined by the activation key that you assigned to your
      Image Profile.</emphasis></para>
   </important>
   <screen>FROM registry.example.com/sles12sp2
MAINTAINER Tux Administrator "tux@example.com"

### Begin: These lines Required for use with SUSE Manager   

ARG repo
ARG cert

# Add the correct certificate
RUN echo "$cert" > /etc/pki/trust/anchors/RHN-ORG-TRUSTED-SSL-CERT.pem

# Update certificate trust store
RUN update-ca-certificates

# Add the repository path to the image
RUN echo "$repo" > /etc/zypp/repos.d/susemanager:dockerbuild.repo

### End: These lines required for use with SUSE Manager

# Add the package script
ADD add_packages.sh /root/add_packages.sh

# Run the package script
RUN /root/add_packages.sh

# After building remove the repository path from image
RUN rm -f /etc/zypp/repos.d/susemanager:dockerbuild.repo</screen>


   <para>The following is an example add_packages.sh script for use with your Dockerfile:</para>
   <screen>#!/bin/bash
set -e

zypper --non-interactive --gpg-auto-import-keys ref

zypper --non-interactive in python python-xml aaa_base aaa_base-extras net-tools timezone vim less sudo tar</screen>
   <note>
    <title>Packages Required for Inspecting Your Images</title>
    <para> To inspect images and provide the package and product list of a container to the
     &susemgr; &webui; you are required to install <package>python</package> and
      <package>python-xml</package> within the container. If these packages remain uninstalled, your
     images will still build, but the package and product list will be unavailable from the &webui;.
    </para>
   </note>

  </sect2>
 </sect1>
 <sect1 xml:id="at.images.image.building">
  <title>Building an Image</title>

  <para> There are two ways to build an image. You can select <menuchoice>
    <guimenu>Images</guimenu>
    <guimenu>Build</guimenu>
   </menuchoice> from the left navigation bar, or click the build icon in the <menuchoice>
    <guimenu>Images</guimenu>
    <guimenu>Profiles</guimenu>
   </menuchoice> list. </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_image_build.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_image_build.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <procedure>
   <title>Build an Image</title>
   <step>
    <para> For this example select <menuchoice>
      <guimenu>Images</guimenu>
      <guimenu>Build</guimenu>
     </menuchoice>. </para>
   </step>
   <step>
    <para> Add a different tag name if you want a version other than the default
      <literal>latest</literal>. </para>
   </step>
   <step>
    <para> Select the <guimenu>Build Profile</guimenu> and a <guimenu>Build Host</guimenu>
    </para>
    <note>
     <title>Profile Summary</title>
     <para> Notice the <guimenu>Profile Summary</guimenu> to the right of the build fields. When you
      have selected a build profile detailed information about the selected profile will show up in
      this area. </para>
    </note>
   </step>
   <step>
    <para> To schedule a build click the <guimenu>Build</guimenu> button. </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="at.images.image.importing">
  <title>Importing an Image</title>

  <para> You can import and inspect arbitrary images. Select <menuchoice>
    <guimenu>Images</guimenu>
    <guimenu>Images</guimenu>
   </menuchoice> from the left navigation bar. Fill the text boxes of the Import dialog. When
   processed the imported image will get listed on the <guimenu>Images</guimenu> page. </para>

  <procedure>
   <title>Import an Image</title>
   <step>
    <para> From <menuchoice>
      <guimenu>Images</guimenu>
      <guimenu>Images</guimenu>
     </menuchoice> click the <guimenu>Import</guimenu> to open the <guimenu>Import Image</guimenu>
     dialog. </para>
   </step>
   <step>
    <para> In the <guimenu>Import</guimenu> dialog fill the following fields: </para>
    <variablelist>
     <varlistentry>
      <term>Image store</term>
      <listitem>
       <para> The registry from where the image will be pulled for inspection. </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Image name</term>
      <listitem>
       <para> The name of the image in the registry. </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Image version</term>
      <listitem>
       <para> The version of the image in the registry. </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Build host</term>
      <listitem>
       <para> The build host that will pull and inspect the image. </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Activation key</term>
      <listitem>
       <para>The activation key provides the path to the software channel that the image will be inspected with. </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para> For confirmation, click <guimenu>Import</guimenu>. </para>
   </step>
  </procedure>
  <para> At this point, the entry for the image is created in the database and an Inspect Image
   action on &susemgr; is scheduled right away. </para>
  <para> When processed find the imported image in the images list. You can recognize it because of
   a different icon in the Build column, which means that the image is imported (see screenshot
   below). The status icon for the imported image can also be seen on the overview tab for the
   image. </para>
 </sect1>

 <sect1>
  <title>Listing Images Available for Building</title>

  <para> To list images availabe for building select <menuchoice>
    <guimenu>Images</guimenu>
    <guimenu>Images</guimenu>
   </menuchoice>. A list of all images will be displayed. </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="images_list_images.png" width="400"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="images_list_images.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <para> Displayed data about images includes an image <guimenu>Name</guimenu>, its
    <guimenu>Version</guimenu> and the build <guimenu>Status</guimenu>. You will also see an images
   update status with a listing of possible patch/package updates that are available for the image. </para>

  <para> Clicking the <guimenu>Details</guimenu> button on an image will provide a detailed view
   including an exact list of relevant patches and a list of all packages installed within the
   image. </para>

  <note>
   <para> The patch and package list is only available if the inspect state after a build was
    successful. </para>
  </note>
 </sect1>
 <sect1>
  <title>Troubleshooting</title>

  <para> The following are some known pitfalls when working with images. </para>

  <itemizedlist>
   <listitem>
    <para> HTTPS certificates to access the registry or the git repositories should be deployed to
     the minion by a custom state file.</para>
   </listitem>
   <listitem>
    <para> SSH git access with docker is currently unsupported. You may test it, but SUSE will not provide support.</para>
   </listitem>
   <listitem>
    <para> If the <package>python</package> and <package>python-xml</package> packages are not installed within
     your images during the build process, Salt cannot run within the container and reporting of installed packages or products
     will fail. This will result in an unknown update status. </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
