<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>

<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="advanced.topics.optimizing.scalability">


<title>Optimization and Scalability</title>

<sect1 xml:id="advanced.topics.optimizing.apache.tomcat">
    
    
    <title>Optimizing Apache/Tomcat Parameters</title>
    
    
    <warning>
        <title>Altering Apache and Tomcat Values</title>
        <para>These values should only be modified with support or consulting as these parameters
            can have severe and catastrophic performance impacts on your server when improperly
            adjusted. SUSE will not be able to provide support for catastrophic failure when these
            advanced parameters are modified without consultation. Tuning values for Apache httpd
            and Tomcat requires that you align these parameters with your server hardware.
            Furthermore testing of these altered values should be performed within a test
            environment.</para>
    </warning>
    
    
    <sect2>
        <title>Apache's httpd MaxClients Parameter</title>
        <para>The <parameter class="option">MaxClients</parameter> setting determines the number of
            Apache httpd processes, and thus limits the number of client connections that can be
            made at the same time (SUSE Manager uses the pre-fork MultiProcessing Modules). The
            default value for <parameter class="option">MaxClients</parameter> in SUSE Manager is
            150. If you need to set the <parameter class="option">MaxClients</parameter> value
            greater than 150, Apache httpd's ServerLimit setting and Tomcat's <parameter
                class="option">maxThreads</parameter> must also be increased accordingly (see
            below).</para>
        
        <warning>
            <para>The Apache httpd <parameter class="option">MaxClients</parameter> parameter must
                always be less or equal than Tomcat's <parameter class="option"
                    >maxThreads</parameter> parameter!</para>
        </warning>
        
        <para>If the <parameter class="option">MaxClients</parameter> value is reached while the
            software is running, new client connections will be queued and forced to wait, this may
            result in timeouts. You can check the Apache httpd's error.log for details:</para>
        
        <screen>[error] Server reached MaxClients setting, consider increasing the MaxClients setting</screen>
        
        <para>The default <parameter class="option">MaxClients</parameter> parameter can be
            overridden on SUSE Manager by editing the <filename>server-tuning.conf</filename> file
            located at: <systemitem>/etc/apache2/</systemitem></para>
        
        <para>Example server-tuning.conf file:</para>
        <screen># prefork MPM
   &lt;IfModule prefork.c&gt;
           # number of server processes to start
           # http://httpd.apache.org/docs/2.2/mod/mpm_common.html#startservers
           StartServers         5
           # minimum number of server processes which are kept spare
           # http://httpd.apache.org/docs/2.2/mod/prefork.html#minspareservers
           MinSpareServers      5
           # maximum number of server processes which are kept spare
           # http://httpd.apache.org/docs/2.2/mod/prefork.html#maxspareservers
           MaxSpareServers     10
           # highest possible MaxClients setting for the lifetime of the Apache process.
           # http://httpd.apache.org/docs/2.2/mod/mpm_common.html#serverlimit
           ServerLimit        150
           # maximum number of server processes allowed to start
           # http://httpd.apache.org/docs/2.2/mod/mpm_common.html#maxclients
           MaxClients         150
           # maximum number of requests a server process serves
           # http://httpd.apache.org/docs/2.2/mod/mpm_common.html#maxrequestsperchild
           MaxRequestsPerChild  10000
   &lt;/IfModule&gt;</screen>
        
    </sect2>
    
    <sect2>
        <title>Tomcat's maxThreads Parameter</title>
        <para>Tomcat's <parameter class="option">maxThreads</parameter> represents the maximum
            number of request processing threads that it will create. This value determines the
            maximum number of simultaneous requests that it is able to handle. Note that all HTTP
            requests to the SUSE Manager server (from clients, browsers, XMLRPC API scripts, etc.)
            are handled by Apache httpd, and some of them are routed to Tomcat for further
            processing. It is thus important that Tomcat is able to serve the same amount of
            simultaneous requests that Apache httpd is able to serve in the worst case. The default
            value for SUSE Manager is 200 and should always be equal or greater than Apache httpd's
            <parameter class="option">MaxClients</parameter>. The <parameter class="option"
                >maxThreads</parameter> value is located within the <filename>server.xml</filename>
            file located at: <systemitem>/etc/tomcat/</systemitem></para>
        <para>Example relevant lines in <filename>server.xml</filename>:</para>
        <screen>&lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" URIEncoding="UTF-8" address="127.0.0.1" maxThreads="200" connectionTimeout="20000"/&gt;
&lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" URIEncoding="UTF-8" address="::1" maxThreads="200" connectionTimeout="20000"/&gt;</screen>
        
        <note>
            <title>Tuning Notes</title>
            <para>When configuring Apache httpd's <parameter class="option">MaxClients</parameter> and Tomcat's <parameter class="option"
                >maxThreads</parameter> parameters you
                should also take into consideration that each HTTP connection will need one
                or more database connections. If the RDBMS is not able to serve an adequate amount
                of connections, issues will arise. Please see the following equation for a rough
                calculation of the needed amount of database connections:</para>
            <screen language="python">((3 * java_max) +  apache_max + 60)</screen>
            <para>Where:</para>
            <itemizedlist>
                <listitem>
                    <para>3 is the number of Java processes the server runs with pooled connections (Tomcat, Taskomatic and Search);</para>
                </listitem>
                <listitem>
                    <para>java_max is the maximum number of connections per Java pool (20 by default, changeable in /etc/rhn/rhn.conf via the hibernate.c3p0.max_size parameter);</para>
                </listitem>
                <listitem>
                    <para>apache_max is Apache httpd's <parameter class="option">MaxClients</parameter>;</para>
                </listitem>
                <listitem>
                    <para>60 is the maximum expected number of extra connections for local processes and other uses.</para>
                </listitem>
            </itemizedlist>
        </note>
    </sect2>
    
</sect1>
</chapter>
