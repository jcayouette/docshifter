<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>

<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="advanced.topics.monitoring.with.icinga">


    <title>Monitoring with Icinga</title>

    <sect1>
        <title>Introduction</title>
        <para>This chapter provides guidance on the setup of an Icinga server using SLES12 SP2. More
            information may be found within the Official Icinga documentation: <link
                xlink:href="http://docs.icinga.org/latest/en/"/></para>

    </sect1>

    <sect1>
        <title>Installation and Basic Configuration</title>
        <para>Icinga packages are found in the <literal>SLE-Manager-Tools12-Updates
            x86_64</literal>.</para>
        <tip>
            <title>Icinga Installation Location</title>
            <para>Do not install Icinga on the SUSE Manager server. Install Icinga on a stand-alone
                SLE client.</para>
        </tip>

        <procedure>
            <title>Installation and Basic Configuration</title>
            <step>
                <para>Register the monitoring server client with SUSE Manager and add the SUSE
                    Manager client and update channels. For both SLES12 and SLES12 SP2 these
                    channels are included by default.</para>
            </step>
            <step>
                <screen>zypper in icinga icinga-idoutils-pgsql postgresql postgresql94-server \
monitoring-plugins-all apache2</screen>
            </step>
            <step>
                <para>Edit the <literal>/etc/icinga/objects/contacts.cfg</literal> file and add the
                    email address which you will use for reciving alerts.</para>
                <screen>define contact {
  contact_name      icingaadmin          ; Short name of user
  use               generic-contact      ; Inherit default values
  alias             Icinga Admin         ; Full name of user
  email             icinga@localhost     ; &lt;&lt;*** CHANGE THIS TO YOUR EMAIL ADDRESS ***
}</screen>
            </step>
            <step>
                <para>Enable postgres on boot and start the database:</para>
                <screen>systemctl enable postgresql.service
systemctl start postgresql.service</screen>
            </step>
            <step>
                <para>Create the database and user for Icinga:</para>
                <screen>#su - postgres
 
 >psql
 postgres=# ALTER USER postgres WITH PASSWORD '&lt;newpassword&gt;';
 postgres=# CREATE USER icinga;
 postgres=# ALTER USER icinga WITH PASSWORD 'icinga';
 postgres=# CREATE DATABASE icinga;
 postgres=# GRANT ALL ON DATABASE icinga TO icinga;
 postgres=# \q
 exit</screen>
            </step>
            <step>
                <para>Adjust client authentication rights located in
                        <literal>/var/lib/pgsql/data/pg_hba.conf</literal> to match the
                    following:</para>
                <screen># TYPE  DATABASE        USER            ADDRESS                 METHOD
local   icinga         icinga                                  trust
local   all            postgres                                ident

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local   replication     postgres                                peer
#host    replication     postgres        127.0.0.1/32            ident
#host    replication     postgres        ::1/128                 ident
</screen>
                <important>
                    <title>Placement of Authentication Settings</title>
                    <para>Ensure the local entries for icinga authentication settings are placed
                        above all other local entries or you will get an error when configuring the
                        database schema. The entries in <filename>pg_hba.conf</filename> are read
                        from top to bottom. </para>
                </important>

            </step>
            <step>
                <para>Reload the Postgres service:</para>
                <screen>systemctl reload postgresql.service</screen>
            </step>
            <step>
                <para>Configure the database schema by running the following command in:
                        <literal>/usr/share/doc/packages/icinga-idoutils-pgsql/pgsql/</literal>:</para>
                <screen>psql -U icinga -d icinga &lt; pgsql.sql</screen>
            </step>
            <step>
                <para>Edit the following lines in <literal>/etc/icinga/ido2db.cfg</literal> to
                    switch from the default setting of mysql to postgres:</para>
                <screen>vi /etc/icinga/ido2db.cfg

 db_servertype=pgsql
 db_port=5432</screen>
                <important>
                    <title>Open Firewall Port</title>
                    <para>Allow port <literal>5432</literal> through your firewall or you will not
                        be able to access the WebGUI.</para>
                </important>
            </step>
            <step>
                <para>Create an icinga admin account for logging into the web interface:</para>
                <screen>htpasswd -c /etc/icinga/htpasswd.users icingaadmin</screen>
            </step>
            <step>
                <para>Enable and start all required services:</para>
                <screen># systemctl enable icinga.service
# systemctl start icinga.service
# systemctl enable ido2db.service
# systemctl start ido2db.service
# systemctl enable apache2.service
# systemctl start apache2.service</screen>
            </step>
            <step>
                <para>Login to the WebGUI at: <link xlink:href="http://localhost/icinga"/>.</para>
            </step>
        </procedure>
        <para>This concludes setup and initial configuration of Icinga.</para>
    </sect1>


    <sect1>
        <title>Icinga and NRPE Quickstart</title>

        <para>The following sections provides an overview on monitoring your SUSE Manager server
            using Icinga. You will add SUSE Manager as a host to Icinga and use a nagios
            script/plugin to monitor running services via <literal>NRPE</literal> (Nagios Remote
            Plugin Executor). This section does not attempt to cover all monitoring solutions Icinga
            has to offer but should help you get started.</para>

        <procedure>
            <title>Adding SUSE Manager to Icinga for Monitoring</title>
            <step>
                <para>On your SUSE Manager server install the required packages: </para>
                <screen>zypper install nagios-nrpe susemanager-nagios-plugin insserv nrpe monitoring-plugins-nrpe</screen>
            </step>
            <step>
                <para>Modify the NRPE configuration file located at:</para>
                <screen>/etc/nrpe.cfg</screen>
                <para>Edit/add the following lines:</para>
                <screen>server_port=5666
nrpe_user=nagios
nrpe_group=nagios
allowed_hosts=Icinga.example.com
dont_blame_nrpe=1
command[check_systemd.sh]=/usr/lib/nagios/plugins/check_systemd.sh $ARG1$</screen>
                <para>Variable definitions:</para>
                <variablelist>
                    <varlistentry>
                        <term>server_port</term>
                        <listitem>
                            <para>The variable <literal>server_port</literal> defines the port nrpe
                                will listen on. The default port is 5666. This port must be opened
                                in your firewall.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>nrpe_user</term>
                        <listitem>
                            <para>The variables <literal>nrpe_user</literal> and
                                    <literal>nrpe_group</literal> control the user and group IDs
                                that nrpe will run under. SUSE Manager probes need access to the
                                database, therefore nrpe requires access to database credentials
                                stored in <filename>/etc/rhn/rhn.conf</filename>. There are multiple
                                ways to achieve this. You may add the user <literal>nagios</literal>
                                to the group <literal>www</literal> (this is already done for other
                                IDs such as tomcat); alternatively you can simply have nrpe run with
                                the effective group ID <literal>www</literal> in
                                    <filename>/etc/rhn/rhn.conf</filename>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>allowed_hosts</term>
                        <listitem>
                            <para>The variable <literal>allowed_hosts</literal> defines which hosts
                                nrpe will accept connections from. Enter the FQDN or IP address of
                                your Icinga server here.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>dont_blame_nrpe</term>
                        <listitem>
                            <para>The use of variable <literal>dont_blame_nrpe</literal> is
                                unavoidable in this example. <literal>nrpe</literal> commands by
                                default will not allow arguments being passed due to security
                                reasons. However, in this example you should pass the name of the
                                host you want information on to nrpe as an argument. This action is
                                only possible when setting the variable to 1.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>command[check_systemd.sh]</term>
                        <listitem>
                            <para>You need to define the command(s) that nrpe can run on SUSE
                                Manager. To add a new nrpe command specify a command call by adding
                                    <literal>command</literal> followed by square brackets
                                containing the actual nagios/icinga plugin name. Next define the
                                location of the script to be called on your SUSE Manager server.
                                Finally the variable <literal>$ARG1$</literal> will be replaced by
                                the actual host the Icinga server would like information about. In
                                the example above, the command is named
                                    <literal>check_systemd.sh</literal>. You can specify any name
                                you like but keep in mind the command name is the actual script
                                stored in <filename>/usr/lib/nagios/plugins/</filename> on your SUSE
                                Manager server. This name must also match your probe definition on
                                the Icinga server. <emphasis>This will be described in greater
                                    detail later in the chapter. The check_systemd.sh script/plugin
                                    will also be provided in a later section.</emphasis></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </step>
            <step>
                <para>One your configuration is complete load the new nrpe configuration
                    with:</para>
                <screen># systemctl start nrpe</screen>
            </step>
        </procedure>
        <para>This concludes setup of nrpe.</para>

        <sect2>
            <title>Adding a Host to Icinga</title>
            <para>To add a new host to Icinga create a host.cfg file for each host in
                    <filename>/etc/icinga/conf.d/</filename>. For example
                    <literal>susemanager.cfg</literal>: </para>
            <screen>define host {
  host_name           susemanager
  alias               SUSE Manager
  address             192.168.1.1
  check_period        24x7
  check_interval      1
  retry_interval      1
  max_check_attempts  10  
  check_command       check-host-alive
}</screen>
            <note>
                <para>Place the host IP address you want to add to Icinga on the
                        <literal>Address</literal> line.</para>
            </note>
            <para>After adding a new host restart Icinga and load the new configuation:</para>
            <screen># systemctl restart icinga</screen>

        </sect2>

        <sect2>
            <title>Adding Services</title>
            <para>To add services for monitoring on a specific host define them by adding a service
                definition to your host.cfg file located in <filename>/etc/icinga/conf.d</filename>.
                For example you can monitor if a systems SSH service is running with the following
                service definition.</para>
            <screen>define service {
  host_name           susemanager
  use                 generic-service
  service_description SSH
  check_command       check_ssh
  check_interval      60
}</screen>
            <para>After adding any new services restart Icinga to load the new configuration: </para>
            <screen># systemctl restart icinga</screen>
        </sect2>

        <sect2>
            <title>Creating Hostgroups</title>
            <para>You can create hostgroups to simplify and visualize hosts logically. Create a
                    <filename>hostgroups.cfg</filename> file located in
                    <filename>/etc/icinga/conf.d/</filename> and add the following lines:</para>
            <screen>define hostgroup {
  hostgroup_name  ssh_group
  alias           ssh group
  members         susemanager,mars,jupiter,pluto,examplehost4
}</screen>
            <para>The <literal>members</literal> variable should contain the
                    <literal>host_name</literal> from within each host.cfg file you created to
                represent your hosts. Every time you add an additional host by creating a host.cfg
                ensure you add the host_name to the members list of included hosts if you want it to
                be included within a logical hostgroup.</para>
            <para>After adding hosts to a hostgroup restart Icinga to load the new configuration: </para>
            <screen># systemctl restart icinga</screen>
        </sect2>

        <sect2>
            <title>Creating Servicegroups</title>
            <para>You can create logical groupings of services as well. For example if you would
                like to create a group of essential SUSE Manager services which are running define
                them within a <filename>servicegroups.cfg</filename> file placed in
                    <filename>/etc/icinga/conf.d/</filename></para>
            <screen>#Servicegroup 1
define servicegroup {
  servicegroup_name     SUSE Manager Essential Services
  alias                 Essential Services
}

#Servicegroup 2
define servicegroup {
  servicegroup_name     Client Patch Status
  alias                 SUSE Manager 3 Client Patch Status
}</screen>
            <para>Within each hosts host.cfg file add a service to a servicegroup with the following
                variable:</para>
            <screen>define service {
  use                 generic-service
  service_description SSH
  check_command       check_ssh
  check_interval      60
  servicegroups       SUSE Manager Essential Services
}</screen>
            <para>All services that include the <literal>servicegroups</literal> variable and the
                name of the servicegroup will be added to the specified servicegroup. After adding
                services to a servicegroup restart Icinga to load the new configuation: </para>
            <screen># systemctl restart icinga</screen>
        </sect2>

    </sect1>

    <sect1>
        <title>Monitoring Systemd Services</title>
        <para>The following section provides information on monitoring uptime of critical SUSE
            Manager services.</para>
        <procedure>
            <title>Monitoring Running Systemd Services</title>
            <step>
                <para>Create a new plugin file called <filename>check_systemd.sh</filename> in
                        <filename>/usr/lib/nagios/plugins/</filename> on your SUSE Manager
                    server:</para>
                <screen># vi /usr/lib/nagios/plugins/ check_systemd.sh</screen>
            </step>
            <step>
                <para>For this example you will use an opensource community script to monitor
                    Systemd services. You may also wish to write your own.</para>
                <screen>#!/bin/bash
# Copyright (C) 2016 Mohamed El Morabity &lt;melmorabity@fedoraproject.com&gt;
#
# This module is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.


PLUGINDIR=$(dirname $0)
. $PLUGINDIR/utils.sh


if [ $# -ne 1 ]; then
    echo "Usage: ${0##*/} &lt;service name&gt;" &gt;&amp;2
    exit $STATE_UNKNOWN
fi

service=$1

status=$(systemctl is-enabled $service 2&gt;/dev/null)
r=$?
if [ -z "$status" ]; then
    echo "ERROR: service $service doesn't exist"
    exit $STATE_CRITICAL
fi

if [ $r -ne 0 ]; then
    echo "ERROR: service $service is $status"
    exit $STATE_CRITICAL
fi

systemctl --quiet is-active $service
if [ $? -ne 0 ]; then
    echo "ERROR: service $service is not running"
    exit $STATE_CRITICAL
fi

echo "OK: service $service is running"
exit $STATE_OK</screen>
                <para>A current version of this script can be found at: <link
                        xlink:href="https://github.com/melmorabity/nagios-plugin-systemd-service/blob/master/check_systemd_service.sh"
                    /></para>
                <warning>
                    <title>Non-supported 3rd Party Plugin</title>
                    <para>The script used in this example is an external script and is not supported
                        by SUSE. Always check to ensure scripts are not modified or contain malicous
                        code before using them on production machines.</para>
                </warning>
            </step>
            <step>
                <para>Make the script executable:</para>
                <screen>chmod 755 check_systemd.sh</screen>
            </step>
            <step>
                <para>On your SUSE manager server add the following line to the
                        <filename>nrpe.cfg</filename> located at
                    <filename>/etc/nrpe.cfg</filename>:</para>
                <screen># SUSE Manager Service Checks
command[check_systemd.sh]=/usr/lib/nagios/plugins/check_systemd.sh $ARG1$</screen>
                <para>This will allow the Icinga server to call the plugin via nrpe on SUSE
                    Manager.</para>
            </step>
            <step>
                <para>Provide proper permissions by adding the script to the sudoers file:</para>
                <screen># visudo</screen>
                <screen>nagios  ALL=(ALL)       NOPASSWD:/usr/lib/nagios/plugins/check_systemd.sh
Defaults:nagios !requiretty</screen>
                <para>You can also add permissions to the entire plugin directory instead of
                    allowing permissions for individual scripts:</para>
                <screen>nagios  ALL=(ALL)       NOPASSWD:/usr/lib/nagios/plugins/</screen>
            </step>
            <step>
                <para>On your Icinga server define the following command within
                        <filename>/etc/icinga/objects/commands.cfg</filename>:</para>
                <screen>define command{
        command_name   check-systemd-service
        command_line   /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -c check_systemd.sh -a $ARG1$
}</screen>
            </step>
            <step>
                <para>Now you will add the following critical services to be montitored to your SUSE
                    Manager host file: </para>
                <itemizedlist>
                    <listitem>
                        <para>auditlog-keeper.service</para>
                    </listitem>
                    <listitem>
                        <para>jabberd.service</para>
                    </listitem>
                    <listitem>
                        <para>spacewalk-wait-for-jabberd.service</para>
                    </listitem>
                    <listitem>
                        <para>tomcat.service</para>
                    </listitem>
                    <listitem>
                        <para>spacewalk-wait-for-tomcat.service</para>
                    </listitem>
                    <listitem>
                        <para>salt-master.service</para>
                    </listitem>
                    <listitem>
                        <para>salt-api.service</para>
                    </listitem>
                    <listitem>
                        <para>spacewalk-wait-for-salt.service</para>
                    </listitem>
                    <listitem>
                        <para>apache2.service</para>
                    </listitem>
                    <listitem>
                        <para>osa-dispatcher.service</para>
                    </listitem>
                    <listitem>
                        <para>rhn-search.service</para>
                    </listitem>
                    <listitem>
                        <para>cobblerd.service</para>
                    </listitem>
                    <listitem>
                        <para>taskomatic.service</para>
                    </listitem>
                    <listitem>
                        <para>spacewalk-wait-for-taskomatic.service</para>
                    </listitem>
                </itemizedlist>
                <para>On your Icinga server add the following service blocks to your SUSE Manager
                    host file <filename>susemanager.cfg</filename> file located in
                        <filename>/etc/icinga/conf.d/</filename>(This configuration file was created
                    in the previous section <emphasis>Adding a Host to Icinga</emphasis>)</para>
                <screen># Monitor Audit Log Keeper
define service {
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Audit Log Keeper Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!auditlog-keeper.service

}

# Monitor Jabberd
define service {
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Jabberd Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!jabberd.service

}

# Monitor Spacewalk Wait for Jabberd
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Spacewalk Wait For Jabberd Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!spacewalk-wait-for-jabberd.service
}

# Monitor Tomcat
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Tomcat Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!tomcat.service
}

# Monitor Spacewalk Wait for Tomcat
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Spacewalk Wait For Tomcat Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!spacewalk-wait-for-tomcat.service
}

# Monitor Salt Master
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Salt Master Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!salt-master.service
}

# Monitor Salt API
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Salt API Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!salt-api.service
}

# Monitor Spacewalk Wait for Salt
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Spacewalk Wait For Salt Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!spacewalk-wait-for-salt.service
}

# Monitor apache2
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Apache2 Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!apache2.service
}

# Monitor osa dispatcher
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Osa Dispatcher Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!osa-dispatcher.service
}

# Monitor rhn search
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    RHN Search Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!rhn-search.service
}

# Monitor Cobblerd
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Cobblerd Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!cobblerd.service
}

# Monitor taskomatic
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Taskomatic Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!taskomatic.service
}

# Monitor wait for taskomatic
define service{
       use                    generic-service
       host_name              susemanager
       check_interval         1
       active_checks_enabled  1
       service_description    Spacewalk Wait For Taskomatic Service
       servicegroups          SUSE Manager Essential Services
       check_command          check-systemd-service!spacewalk-wait-for-taskomatic.service
}</screen>
                <para>Each of these service blocks will be passed as the
                    check-systemd-service!$ARG1$ variable to SUSE manager server via nrpe. You
                    probably noticed the servicegroups parameter was also included. This adds each
                    service to a servicegroup and has been defined in a servicesgroups.cfg file
                    located in <filename>/etc/icinga/conf.d/</filename>:</para>
                <screen>define servicegroup{
       servicegroup_name     SUSE Manager Essential Services
       alias                 Essential Services
}</screen>
            </step>
            <step>
                <para>Restart Icinga:</para>
                <screen>systemctl restart icinga</screen>
            </step>

        </procedure>
    </sect1>

    <!--    <sect1>
        <title>Monitoring Disk Space</title>
        <para>TESTING COMPLETE COMING SOON</para>
    </sect1> -->

    <sect1>
        <title>Using the check_suma_patches Plugin</title>
        <para>You can use the <filename>check_suma_patches</filename> plugin to check if any
            machines connected to SUSE Manager as clients require a patch or an update. The
            following procedure will guide you through the setup of the check_suma_patches
            plugin.</para>

        <procedure>
            <title>Setup check_suma_patches</title>
            <step>
                <para>On your SUSE Manager server open <filename>/etc/nrpe.cfg</filename> and add
                    the following lines:</para>
                <screen># SUSE Manager check_patches
command[check_suma_patches]=sudo /usr/lib/nagios/plugins/check_suma_patches $ARG1$</screen>
            </step>
            <step>
                <para>On your Icinga server open
                        <filename>/etc/icinga/objects/commands.cfg</filename> and define the
                    following command:</para>
                <screen>define command{
        command_name    check_suma
        command_line    /usr/lib/nagios/plugins/check_nrpe -H 192.168.1.1 -c $ARG1$ -a $HOSTNAME$
}</screen>
            </step>
            <step>
                <para>On your Icinga server open any of your SUSE Manager client host configration
                    files lcoated at <filename>/etc/icinga/conf.d/clients.cfg</filename> and add the
                    following service definition:</para>
                <screen>define service{
        use                             generic-service
        host_name                       client-hostname
        service_description             Available Patches for client-host_name 
        servicegroups                   Client Patch Status
        check_command                   check_suma!check_suma_patches
}</screen>
            </step>
            <step>
                <para>In the above service definition notice that this host is included in the
                    servicegroup labeled <emphasis>Client Patch Status</emphasis>. Add the following
                    servicegroup definition to
                        <filename>/etc/icinga/conf.d/servicegroups.cfg</filename> to create a
                    servicegroup:</para>
                <screen>define servicegroup {
       servicegroup_name     Client Patch Status
       alias                 SUSE Manager 3 Client Patch Status
}
</screen>
            </step>
            <step>
                <para/>
                <itemizedlist>
                    <listitem>
                        <para><literal>OK:System is up to date</literal></para>
                    </listitem>
                    <listitem>
                        <para><literal>Warning: At least one patch or package update is
                                available</literal></para>
                    </listitem>
                    <listitem>
                        <para><literal>Critical:At least one security/critical update is
                                available</literal></para>
                    </listitem>
                    <listitem>
                        <para><literal>Unspecified:The host cannot be found in the SUSE Manager
                                database or the host name is not unique</literal>
                        </para>
                    </listitem>
                </itemizedlist>
            </step>
        </procedure>
        <para>This concludes setup of the <literal>check_suma_patches</literal> plugin.</para>
    </sect1>

    <sect1>
        <title>Using the check_suma_lastevent Plugin</title>
        <para>You can use the <filename>check_suma_lastevent</filename> plugin to display the last
            action executed on any host. </para>

        <para>The following procedure will guide you through the setup of the check_suma_patches
            plugin.</para>

        <procedure>
            <title>Setup check_suma_lastevent</title>
            <step>
                <para>On your SUSE Manager server open <filename>/etc/nrpe.cfg</filename> and add
                    the following lines:</para>
                <screen># Check SUSE Manager Hosts last events
command[check_events]=sudo /usr/lib/nagios/plugins/check_suma_lastevent $ARG1$ </screen>
            </step>
            <step>
                <para>On your Icina server open
                        <filename>/etc/icinga/objects/commands.cfg</filename> and add the following
                    lines:</para>
                <screen>define command{
        command_name    check_events
        command_line    /usr/lib/nagios/plugins/check_nrpe -H manager.suse.de -c $ARG1$ -a $HOSTNAME$
}</screen>
            </step>
            <step>
                <para>On your Icinga server add the following line to a host.cfg service
                    definition:</para>
                <screen>define service{
        use                             generic-service
        host_name                       hostname
        service_description             Last Events
        check_command                   check_events!check_suma_lastevent
}</screen>
            </step>
            <step>
                <para>Status will be reported as follows:</para>
                <itemizedlist>
                    <listitem>
                        <para><literal>OK:Last action completed successfully</literal></para>
                    </listitem>
                    <listitem>
                        <para><literal>Warning: Action is currently in progress</literal></para>
                    </listitem>
                    <listitem>
                        <para><literal>Critical:Last action failed</literal></para>
                    </listitem>
                    <listitem>
                        <para><literal>Unspecified:The host cannot be found in the SUSE Manager
                                database or the host name is not unique</literal>
                        </para>
                    </listitem>
                </itemizedlist>
            </step>
        </procedure>
        <para>This concludes setup of the <literal>check_suma_lastevent</literal> plugin.</para>
    </sect1>

    <sect1>
        <title>Additional Resources</title>
        <para>For additional resources see Icinga's official documentation located at:<link
                xlink:href="http://docs.icinga.org/latest/en"/></para>
        <para>For some excellent time saving configuration tips and tricks not covered in this guide
            check the following section located within the official documentation here:<link
                xlink:href="http://docs.icinga.org/latest/en/objecttricks.html"/></para>
    </sect1>




</chapter>
